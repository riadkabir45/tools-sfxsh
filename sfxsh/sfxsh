#!/bin/sh

# Enable exit on error
set -e

# Cleanup function
cleanup()
{
  error="$?"
  [ "$error" = "0" ] && return 0
  echo "E : Error occured $?"
  [ -f "workdir/out/sh" ] && rm workdir/out/sfx
  return $error
}

# Trigger cleanup on exit if error is not 0
trap 'cleanup' EXIT

# Show usage function
usage()
{
cat<<EOF
Usage: sfxsh OPTION
Create a script with files or folders embedded

Options:
  configure      Create a workdir
  build          Build the workdir to a script in workdir/out
EOF
}

# Build workdir to script(All of its stdout will go to script)
build()
{
  # Check if workdir is ok
  [ ! -d "workdir/assets" ] && [ ! -d "workdir/out" ] &&   [ ! -f "workdir/init" ]  && >&2 echo "E : workdir missing" && return 1
  
  # Check if shebang exists
  line=$(cat workdir/init | wc -l)
  headline=$(head -1 workdir/init)
  [ "$(echo $headline | grep -o "^..")" = "#!" ] && needS=0 || needS=1
  
  # Apply shebang if not existed
  [ "$needS" = "1" ] && echo "#!/bin/sh"
  
  # Return 1st line if it was not shebang
  [ "$needS" = "0" ] && echo "$headline"
  
  # Extarction line
  echo "mkdir -p assets && sfx=\$(realpath \"\$0\")  && cd assets && tail -n+$((line+1+needS+2+1)) \"\$sfx\" |cpio -mid"
  
  # Rest of the code excpet shebang
  tail -n+2 workdir/init
  
  # Safety exit if coder does not
  echo -e "\nexit 0"
  
  # Embedding all to stdout
  cd workdir/assets
  busybox find . | cpio -o -H newc
}

config()
{
  # Create necessary structure
  mkdir -p workdir/assets
  mkdir -p workdir/out
  touch workdir/init
}

case "$1" in
  configure)
    config;;
  build)
    # Pipe build stdout to script
    build>workdir/out/sfx;;
  *)
     usage;;
esac

exit 0
